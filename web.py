import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from sklearn.cluster import AffinityPropagation, DBSCAN, KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import plotly.express as px
from scipy.spatial.distance import pdist, squareform
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="3D –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è Pro",
    page_icon="üßä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞
min_r = 1

def distance(x1, y1, x2, y2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏"""
    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5

def search_min(data):
    """–ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–¥–∏—É—Å–∞"""
    x = data['x'].tolist()
    y = data['y'].tolist()
    z = data['z'].tolist()
    local_min = []
    
    for i in range(len(x)):
        flag = True
        for j in range(len(x)):
            if i != j and distance(x[i], y[i], x[j], y[j]) <= min_r and z[j] < z[i]:
                flag = False
                break
        if flag:
            local_min.append([x[i], y[i], z[i]])
    
    local_min = pd.DataFrame(local_min)
    if not local_min.empty:
        local_min.columns = ['x', 'y', 'z']
    return local_min

def search_min2(data, k_neig):
    """–ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º k –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π"""
    x = data['x'].tolist()
    y = data['y'].tolist()
    z = data['z'].tolist()
    local_min = []
    
    for i in range(len(x)):
        points = []
        for j in range(len(x)):
            if i != j:
                points.append([distance(x[i], y[i], x[j], y[j]), z[j]])
        
        if len(points) >= k_neig:
            points = sorted(points, key=lambda ax: ax[0])[:k_neig]
            zx = min(points, key=lambda ax: ax[1])[1]
            if zx > z[i]:
                local_min.append([x[i], y[i], z[i], sum(point[1] for point in points) / len(points)])
    
    local_min = pd.DataFrame(local_min)
    if not local_min.empty:
        local_min.columns = ['x', 'y', 'z', 'dz']
    return local_min

def search_min3(data, k_neig = 3):
    """–ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è 3, 5 –∏ 10 —Å–æ—Å–µ–¥–µ–π"""
    x = data['x'].tolist()
    y = data['y'].tolist()
    z = data['z'].tolist()

    local_min = []

    for i in range(len(x)):
        points = []
        for j in range(len(x)):
            if i != j:
                points.append([x[j], y[j], z[j], distance(x[i], y[i], x[j], y[j])])
        
        if len(points) >= k_neig:
            points = sorted(points, key=lambda ax: ax[-1])
            zx = min(points[:k_neig], key=lambda ax: ax[2])[2]

            if zx > z[i]:
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Å–µ–¥–µ–π
                dz3 = sum(point[2] for point in points[:3]) / 3 if len(points) >= 3 else z[i]
                dz5 = sum(point[2] for point in points[:5]) / 5 if len(points) >= 5 else dz3
                dz10 = sum(point[2] for point in points[:10]) / 10 if len(points) >= 10 else dz5
                local_min.append([x[i], y[i], z[i], dz3, dz5, dz10])

    local_min = pd.DataFrame(local_min)
    if not local_min.empty:
        local_min.columns = ['x', 'y', 'z', 'dz3', 'dz5', 'dz10']
    return local_min

def perform_clustering(data, n_clusters=5):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é KMeans –ø–æ —Ç—Ä–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º dz3, dz5, dz10"""
    required_features = ['dz3', 'dz5', 'dz10']
    if not all(col in data.columns for col in required_features):
        return np.zeros(len(data)), 1
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ç—Ä–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    features = data[required_features].values
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    scaler = StandardScaler()
    features_scaled = scaler.fit_transform(features)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ KMeans
    clusterer = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    labels = clusterer.fit_predict(features_scaled)
    
    return labels, n_clusters, features_scaled

def create_dbscan_plot(df, eps=0.27, min_samples=4, show_convex_hulls=True):
    """–°–æ–∑–¥–∞–µ—Ç 3D –≥—Ä–∞—Ñ–∏–∫ —Å DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Ç–æ—á–µ–∫"""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    X = df[['x', 'y', 'z']].values
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
    dbscan = DBSCAN(eps=eps, min_samples=min_samples)
    clusters = dbscan.fit_predict(X_scaled)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    df_with_clusters = df.copy()
    df_with_clusters['cluster'] = clusters
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    n_clusters = len(set(clusters)) - (1 if -1 in clusters else 0)
    n_noise = list(clusters).count(-1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig = go.Figure()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    fig.add_trace(go.Mesh3d(
        x=df['x'],
        y=df['y'],
        z=df['z'],
        opacity=0.1,
        colorscale='Reds',
        name='–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö',
        showlegend=False,
        lighting=dict(ambient=0.4, diffuse=0.8)
    ))
    
    # –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    colors = [
        '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',
        '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf',
        '#aec7e8', '#ffbb78', '#98df8a', '#ff9896', '#c5b0d5'
    ]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
    for cluster_id in sorted(set(clusters)):
        cluster_data = df_with_clusters[df_with_clusters['cluster'] == cluster_id]
        
        if cluster_id != -1:

            # –¢–æ—á–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
            if len(cluster_data) > 2:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Ç–µ—Ä—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
                color = colors[cluster_id % len(colors)]
                fig.add_trace(go.Scatter3d(
                    x=cluster_data['x'],
                    y=cluster_data['y'],
                    z=cluster_data['z'],
                    mode='markers',
                    marker=dict(
                        size=6,
                        color=color,
                        opacity=0.8,
                        line=dict(width=1, color='black')
                    ),
                    name=f'–ö–ª–∞—Å—Ç–µ—Ä {cluster_id} ({len(cluster_data)} —Ç–æ—á–µ–∫)',
                    hovertemplate=f'<b>–ö–ª–∞—Å—Ç–µ—Ä {cluster_id}</b><br>x: %{{x}}<br>y: %{{y}}<br>z: %{{z}}<extra></extra>'
                ))
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø—É–∫–ª—ã—Ö –æ–±–æ–ª–æ—á–µ–∫ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
                if show_convex_hulls and len(cluster_data) >= 4:
                    try:
                        fig.add_trace(go.Mesh3d(
                            x=cluster_data['x'],
                            y=cluster_data['y'],
                            z=cluster_data['z'],
                            alphahull=5,  # –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
                            opacity=0.3,
                            color=color,
                            name=f'–û–±–æ–ª–æ—á–∫–∞ {cluster_id}',
                            showlegend=False,
                            lighting=dict(ambient=0.6, diffuse=0.4)
                        ))
                    except:
                        pass  # –ò–Ω–æ–≥–¥–∞ alphahull –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ç–æ—á–µ–∫
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
    fig.update_layout(
        title=f'DBSCAN –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (eps={eps}, min_samples={min_samples})<br>–ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {n_clusters}, –®—É–º–æ–≤—ã—Ö —Ç–æ—á–µ–∫: {n_noise}',
        scene=dict(
            xaxis_title='X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞',
            yaxis_title='Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞',
            zaxis_title='Z –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞',
            aspectmode='data',  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –æ—Å–µ–π
            camera=dict(
                eye=dict(x=1.5, y=1.5, z=0.6)
            ),
            bgcolor='rgba(0,0,0,0)'
        ),
        width=900,
        height=700,
        margin=dict(l=0, r=0, b=0, t=60),
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    fig.update_layout(
        updatemenus=[
            dict(
                type="buttons",
                direction="right",
            
                pad={"r": 10, "t": 10},
                showactive=True,
                x=0.02,
                xanchor="left",
                y=1.08,
                yanchor="top"
            )
        ]
    )
    
    return fig

def create_2d_plots(df, data, labels):
    """–°–æ–∑–¥–∞–µ—Ç 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    fig_2d = go.Figure()
    
    # Scatter plot —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ Z
    fig_2d.add_trace(go.Scatter(
        x=df['x'],
        y=df['y'],
        mode='markers',
        marker=dict(
            color=df['z'],
            colorscale='Viridis',
            size=4,
            opacity=0.6,
            colorbar=dict(title="Z –∑–Ω–∞—á–µ–Ω–∏—è")
        ),
        name='–í—Å–µ —Ç–æ—á–∫–∏',
        hovertemplate='x: %{x}<br>y: %{y}<br>z: %{text}<extra></extra>',
        text=df['z']
    ))
    
    # –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã
    if not data.empty:
        fig_2d.add_trace(go.Scatter(
            x=data['x'],
            y=data['y'],
            mode='markers',
            marker=dict(
                color=labels,
                colorscale='rainbow',
                size=10,
                symbol='star',
                line=dict(width=2, color='black')
            ),
            name='–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã',
            hovertemplate='–ö–ª–∞—Å—Ç–µ—Ä: %{text}<br>x: %{x}<br>y: %{y}<extra></extra>',
            text=labels
        ))
    
    fig_2d.update_layout(
        title='2D –ø—Ä–æ–µ–∫—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
        xaxis_title='X',
        yaxis_title='Y',
        width=800,
        height=600
    )
    
    return fig_2d

def create_statistical_plots(data, labels):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏"""
    if data.empty:
        return None, None, None
    
    # 1. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    fig_hist_all = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
    for i, feature in enumerate(['dz3', 'dz5', 'dz10']):
        fig_hist_all.add_trace(go.Histogram(
            x=data[feature],
            name=f'{feature}',
            opacity=0.7,
            nbinsx=20,
            offsetgroup=i
        ))
    
    fig_hist_all.update_layout(
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö dz –ø—Ä–∏–∑–Ω–∞–∫–æ–≤',
        xaxis_title='–ó–Ω–∞—á–µ–Ω–∏—è',
        yaxis_title='–ß–∞—Å—Ç–æ—Ç–∞',
        barmode='overlay'
    )
    
    # 2. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    available_cols = ['x', 'y', 'z', 'dz3', 'dz5', 'dz10']
    correlation_data = data[available_cols].corr()
    fig_corr = px.imshow(
        correlation_data,
        text_auto=True,
        title='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤',
        color_continuous_scale='RdBu'
    )
    
    # 3. 3D scatter plot –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
    fig_3d_features = go.Figure()
    
    if len(set(labels)) > 1:
        fig_3d_features.add_trace(go.Scatter3d(
            x=data['dz3'],
            y=data['dz5'],
            z=data['dz10'],
            mode='markers',
            marker=dict(
                color=labels,
                colorscale='rainbow',
                size=8,
                opacity=0.8,
                colorbar=dict(title="–ö–ª–∞—Å—Ç–µ—Ä")
            ),
            text=[f'–ö–ª–∞—Å—Ç–µ—Ä: {label}' for label in labels],
            hovertemplate='<b>%{text}</b><br>dz3: %{x}<br>dz5: %{y}<br>dz10: %{z}<extra></extra>'
        ))
    else:
        fig_3d_features.add_trace(go.Scatter3d(
            x=data['dz3'],
            y=data['dz5'],
            z=data['dz10'],
            mode='markers',
            marker=dict(
                color='blue',
                size=8,
                opacity=0.8
            ),
            hovertemplate='dz3: %{x}<br>dz5: %{y}<br>dz10: %{z}<extra></extra>'
        ))
    
    fig_3d_features.update_layout(
        title='3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (dz3, dz5, dz10)',
        scene=dict(
            xaxis_title='dz3',
            yaxis_title='dz5',
            zaxis_title='dz10'
        )
    )
    
    return fig_hist_all, fig_corr, fig_3d_features

def analyze_clusters(data, labels):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
    if data.empty:
        return pd.DataFrame()
    
    cluster_stats = []
    unique_labels = sorted(set(labels))
    
    for label in unique_labels:
        if label == -1:  # DBSCAN noise points
            continue
        mask = labels == label
        cluster_data = data[mask]
        
        stats = {
            '–ö–ª–∞—Å—Ç–µ—Ä': label,
            '–†–∞–∑–º–µ—Ä': len(cluster_data),
            '–°—Ä–µ–¥–Ω–∏–π X': cluster_data['x'].mean(),
            '–°—Ä–µ–¥–Ω–∏–π Y': cluster_data['y'].mean(),
            '–°—Ä–µ–¥–Ω–∏–π Z': cluster_data['z'].mean(),
            '–°—Ä–µ–¥–Ω–∏–π dz3': cluster_data['dz3'].mean(),
            '–°—Ä–µ–¥–Ω–∏–π dz5': cluster_data['dz5'].mean(),
            '–°—Ä–µ–¥–Ω–∏–π dz10': cluster_data['dz10'].mean(),
            'Std Z': cluster_data['z'].std(),
            'Std dz3': cluster_data['dz3'].std(),
            'Std dz5': cluster_data['dz5'].std(),
            'Std dz10': cluster_data['dz10'].std(),
            'Min Z': cluster_data['z'].min(),
            'Max Z': cluster_data['z'].max()
        }
        
        cluster_stats.append(stats)
    
    return pd.DataFrame(cluster_stats)

def create_3d_plot(df, data, labels, surface_opacity=0.6, point_size=8):
    """–°–æ–∑–¥–∞–µ—Ç 3D –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å—é –∏ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏"""
    fig = go.Figure()
    
    # 1. –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å (—Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è) - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    if st.session_state.get('show_surface', True):
        fig.add_trace(go.Mesh3d(
            x=df['x'],
            y=df['y'],
            z=df['z'],
            opacity=surface_opacity,
            colorscale='Reds',
            name='–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å',
            showlegend=False,
            lighting=dict(ambient=0.4, diffuse=0.8)
        ))
    
    # –í—Å–µ —Ç–æ—á–∫–∏ –∫–∞–∫ –æ–±–ª–∞–∫–æ —Ç–æ—á–µ–∫
    if st.session_state.get('show_all_points', False):
        fig.add_trace(go.Scatter3d(
            x=df['x'],
            y=df['y'],
            z=df['z'],
            mode='markers',
            marker=dict(
                size=3,
                color=df['z'],
                colorscale='Viridis',
                opacity=0.3
            ),
            name='–í—Å–µ —Ç–æ—á–∫–∏'
        ))
    
    # 2. –¢–æ—á–∫–∏ –º–∏–Ω–∏–º—É–º–æ–≤ —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
    if not data.empty and len(labels) > 0:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è hover —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
        hover_text = [
            f'–ö–ª–∞—Å—Ç–µ—Ä: {label}<br>dz3: {dz3:.3f}<br>dz5: {dz5:.3f}<br>dz10: {dz10:.3f}' 
            for label, dz3, dz5, dz10 in zip(labels, data['dz3'], data['dz5'], data['dz10'])
        ]
        
        fig.add_trace(go.Scatter3d(
            x=data['x'],
            y=data['y'],
            z=data['z'],
            mode='markers',
            marker=dict(
                size=point_size,
                color=labels,
                colorscale='rainbow',
                opacity=0.9,
                line=dict(width=1, color='black'),
                colorbar=dict(title="–ö–ª–∞—Å—Ç–µ—Ä")
            ),
            name='–ö–ª–∞—Å—Ç–µ—Ä—ã (–ø–æ dz3, dz5, dz10)',
            text=hover_text,
            hovertemplate='<b>%{text}</b><br>x: %{x}<br>y: %{y}<br>z: %{z}<extra></extra>'
        ))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
    fig.update_layout(
        title='3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π',
        scene=dict(
            xaxis_title='X',
            yaxis_title='Y',
            zaxis_title='Z',
            camera=dict(
                eye=dict(x=1.5, y=1.5, z=0.6)
            ),
            bgcolor='rgba(0,0,0,0)'
        ),
        width=900,
        height=700,
        legend=dict(orientation="h", yanchor="bottom", y=1.02)
    )
    
    return fig

def main():
    st.title("üßä 3D –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π")
    st.markdown("### –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    if 'show_surface' not in st.session_state:
        st.session_state.show_surface = True
    if 'show_all_points' not in st.session_state:
        st.session_state.show_all_points = False
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    st.sidebar.header("üéõÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.sidebar.file_uploader("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", type=['csv'])
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    st.sidebar.subheader("üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    show_surface = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å", value=True)
    show_all_points = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏", value=False)
    surface_opacity = st.sidebar.slider("–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏", 0.0, 1.0, 0.6)
    point_size = st.sidebar.slider("–†–∞–∑–º–µ—Ä —Ç–æ—á–µ–∫", 3, 15, 8)
    
    st.session_state.show_surface = show_surface
    st.session_state.show_all_points = show_all_points
    
    if uploaded_file is not None:
        try:
            # Progress bar –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            status_text.text('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...')
            progress_bar.progress(10)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            df = pd.read_csv(uploaded_file)
            progress_bar.progress(20)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = ['x', 'y', 'z']
            if not all(col in df.columns for col in required_columns):
                st.error(f"‚ùå CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {required_columns}")
                st.stop()
            
            st.sidebar.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} —Ç–æ—á–µ–∫")
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            st.sidebar.subheader("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
            k_neig = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π", min_value=3, max_value=20, value=3)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã KMeans
            st.sidebar.subheader("üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
            n_clusters = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", min_value=2, max_value=15, value=5)
            
            st.sidebar.info("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è KMeans –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç—Ä–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º: dz3, dz5, dz10")
            
            progress_bar.progress(30)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
            tab1, tab2, tab3, tab4, tab5 = st.tabs([
                "üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                "üîç –ê–Ω–∞–ª–∏–∑ –º–∏–Ω–∏–º—É–º–æ–≤", 
                "üìà 3D –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", 
                "üìâ 2D & –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
            ])
            
            with tab1:
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫", len(df))
                    st.metric("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", f"{df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
                
                with col2:
                    st.metric("–ú–∏–Ω Z", f"{df['z'].min():.3f}")
                    st.metric("–ú–∞–∫—Å Z", f"{df['z'].max():.3f}")
                
                with col3:
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ Z", f"{df['z'].mean():.3f}")
                    st.metric("–°—Ç–¥ Z", f"{df['z'].std():.3f}")
                
                st.subheader("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**–ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫:**")
                    st.dataframe(df.head(10), use_container_width=True)
                
                with col2:
                    st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:**")
                    st.dataframe(df.describe(), use_container_width=True)
            
            # –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º search_min3
            status_text.text('üîç –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤...')
            progress_bar.progress(50)
            
            start_time = time.time()
            data = search_min3(df, k_neig)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º search_min3
            search_time = time.time() - start_time
            
            progress_bar.progress(70)
            
            if data.empty:
                st.warning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
                st.stop()
            
            # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
            status_text.text('ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...')
            progress_bar.progress(80)
            
            start_cluster_time = time.time()
            labels, n_clusters_actual, features_scaled = perform_clustering(data, n_clusters)
            cluster_time = time.time() - start_cluster_time
            
            progress_bar.progress(100)
            status_text.text('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!')
            time.sleep(0.5)
            progress_bar.empty()
            status_text.empty()
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö
            with tab2:
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–ù–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º–æ–≤", len(data))
                with col2:
                    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", n_clusters_actual)
                with col3:
                    st.metric("–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞", f"{search_time:.2f} —Å–µ–∫")
                
                st.subheader("üìã –î–µ—Ç–∞–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤")
                st.dataframe(data, use_container_width=True)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if not data.empty:
                    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ—Å–µ–¥–µ–π")
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("–°—Ä–µ–¥–Ω–µ–µ dz3", f"{data['dz3'].mean():.3f}")
                    with col2:
                        st.metric("–°—Ä–µ–¥–Ω–µ–µ dz5", f"{data['dz5'].mean():.3f}")
                    with col3:
                        st.metric("–°—Ä–µ–¥–Ω–µ–µ dz10", f"{data['dz10'].mean():.3f}")
                
                # –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
                if n_clusters_actual > 0:
                    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
                    cluster_analysis = analyze_clusters(data, labels)
                    st.dataframe(cluster_analysis, use_container_width=True)
            
            with tab3:
                st.subheader("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è 3D –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ 3D –≥—Ä–∞—Ñ–∏–∫–∞
                fig_3d = create_3d_plot(df, data, labels, surface_opacity, point_size)
                st.plotly_chart(fig_3d, use_container_width=True)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–í—Ä–µ–º—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏", f"{cluster_time:.2f} —Å–µ–∫")
                with col2:
                    st.metric("–®—É–º–æ–≤—ã–µ —Ç–æ—á–∫–∏", 0)  # KMeans –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —à—É–º–æ–≤—ã–µ —Ç–æ—á–∫–∏
                with col3:
                    st.metric("–ú–µ—Ç–æ–¥ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏", "KMeans")
                
                # –î–æ–±–∞–≤–ª—è–µ–º DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
                st.subheader("üî¨ DBSCAN –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫")
                st.markdown("*–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é DBSCAN*")
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã DBSCAN
                col1, col2, col3 = st.columns(3)
                with col1:
                    eps = st.slider("DBSCAN eps (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)", 0.1, 1.0, 0.27, 0.01)
                with col2:
                    min_samples = st.slider("DBSCAN min_samples", 2, 20, 4)
                with col3:
                    show_convex_hulls = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø—É–∫–ª—ã–µ –æ–±–æ–ª–æ—á–∫–∏", value=True)
                
                if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å DBSCAN –∞–Ω–∞–ª–∏–∑"):
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è..."):
                        fig_dbscan = create_dbscan_plot(df, eps, min_samples, show_convex_hulls)
                        st.plotly_chart(fig_dbscan, use_container_width=True)
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã DBSCAN –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
                        X = df[['x', 'y', 'z']].values
                        scaler = StandardScaler()
                        X_scaled = scaler.fit_transform(X)
                        dbscan = DBSCAN(eps=eps, min_samples=min_samples)
                        clusters_dbscan = dbscan.fit_predict(X_scaled)
                        
                        n_clusters_dbscan = len(set(clusters_dbscan)) - (1 if -1 in clusters_dbscan else 0)
                        n_noise = list(clusters_dbscan).count(-1)
                        
                        # –ú–µ—Ç—Ä–∏–∫–∏ DBSCAN
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("DBSCAN –ö–ª–∞—Å—Ç–µ—Ä—ã", n_clusters_dbscan)
                        with col2:
                            st.metric("–®—É–º–æ–≤—ã–µ —Ç–æ—á–∫–∏", n_noise)
                        with col3:
                            st.metric("% —à—É–º–∞", f"{n_noise/len(df)*100:.1f}%")
                        with col4:
                            st.metric("–¢–æ—á–µ–∫ –≤ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö", len(df) - n_noise)
                        
                        # –ê–Ω–∞–ª–∏–∑ DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
                        if n_clusters_dbscan > 0:
                            st.subheader("üìä –ê–Ω–∞–ª–∏–∑ DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
                            df_with_dbscan = df.copy()
                            df_with_dbscan['cluster'] = clusters_dbscan
                            
                            dbscan_stats = []
                            for cluster_id in sorted(set(clusters_dbscan)):
                                if cluster_id != -1:  # –ò—Å–∫–ª—é—á–∞–µ–º —à—É–º–æ–≤—ã–µ —Ç–æ—á–∫–∏
                                    cluster_data = df_with_dbscan[df_with_dbscan['cluster'] == cluster_id]
                                    stats = {
                                        '–ö–ª–∞—Å—Ç–µ—Ä': cluster_id,
                                        '–†–∞–∑–º–µ—Ä': len(cluster_data),
                                        '–°—Ä–µ–¥–Ω–∏–π X': cluster_data['x'].mean(),
                                        '–°—Ä–µ–¥–Ω–∏–π Y': cluster_data['y'].mean(),
                                        '–°—Ä–µ–¥–Ω–∏–π Z': cluster_data['z'].mean(),
                                        'Std X': cluster_data['x'].std(),
                                        'Std Y': cluster_data['y'].std(),
                                        'Std Z': cluster_data['z'].std(),
                                        'Min Z': cluster_data['z'].min(),
                                        'Max Z': cluster_data['z'].max()
                                    }
                                    dbscan_stats.append(stats)
                            
                            if dbscan_stats:
                                st.dataframe(pd.DataFrame(dbscan_stats), use_container_width=True)
            
            with tab4:
                st.subheader("üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
                
                # 2D –ø—Ä–æ–µ–∫—Ü–∏—è
                fig_2d = create_2d_plots(df, data, labels)
                st.plotly_chart(fig_2d, use_container_width=True)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏
                col1, col2 = st.columns(2)
                
                if not data.empty:
                    fig_hist, fig_corr, fig_3d_features = create_statistical_plots(data, labels)
                    
                    with col1:
                        if fig_hist:
                            st.plotly_chart(fig_hist, use_container_width=True)
                    
                    with col2:
                        if fig_corr:
                            st.plotly_chart(fig_corr, use_container_width=True)
                
                # 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                if not data.empty:
                    st.subheader("üéØ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                    if 'fig_3d_features' in locals():
                        st.plotly_chart(fig_3d_features, use_container_width=True)
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
                if len(labels) > 0:
                    st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
                    cluster_counts = pd.Series(labels).value_counts().sort_index()
                    st.bar_chart(cluster_counts)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è dz –∑–Ω–∞—á–µ–Ω–∏–π
                if not data.empty:
                    st.subheader("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ—Å–µ–¥–µ–π")
                    fig_compare = go.Figure()
                    fig_compare.add_trace(go.Box(y=data['dz3'], name='dz3 (3 —Å–æ—Å–µ–¥–∞)'))
                    fig_compare.add_trace(go.Box(y=data['dz5'], name='dz5 (5 —Å–æ—Å–µ–¥–µ–π)'))
                    fig_compare.add_trace(go.Box(y=data['dz10'], name='dz10 (10 —Å–æ—Å–µ–¥–µ–π)'))
                    fig_compare.update_layout(
                        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Å–µ–¥–µ–π',
                        yaxis_title='–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ z'
                    )
                    st.plotly_chart(fig_compare, use_container_width=True)
            
            with tab5:
                st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                col1, col2, col3 = st.columns(3)
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                data_with_clusters = data.copy()
                data_with_clusters['cluster'] = labels
                
                with col1:
                    csv_data = data_with_clusters.to_csv(index=False)
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (CSV)",
                        data=csv_data,
                        file_name=f'local_minima_clusters_kmeans.csv',
                        mime='text/csv'
                    )
                
                with col2:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                    cluster_analysis = analyze_clusters(data, labels)
                    report = f"""# –û—Ç—á–µ—Ç –ø–æ KMeans –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤

## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:
- –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞: search_min3
- –ú–µ—Ç–æ–¥ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: KMeans
- –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: dz3, dz5, dz10 (–º–Ω–æ–≥–æ–º–µ—Ä–Ω–∞—è)
- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: StandardScaler
- K —Å–æ—Å–µ–¥–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º—É–º–æ–≤: {k_neig}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {n_clusters}
- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {len(df)}
- –ù–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º–æ–≤: {len(data)}
- –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_time:.2f} —Å–µ–∫
- –í—Ä–µ–º—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {cluster_time:.2f} —Å–µ–∫

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π:
- –°—Ä–µ–¥–Ω–µ–µ dz3: {data['dz3'].mean():.3f} ¬± {data['dz3'].std():.3f}
- –°—Ä–µ–¥–Ω–µ–µ dz5: {data['dz5'].mean():.3f} ¬± {data['dz5'].std():.3f}
- –°—Ä–µ–¥–Ω–µ–µ dz10: {data['dz10'].mean():.3f} ¬± {data['dz10'].std():.3f}

## –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏:
- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è dz3-dz5: {data[['dz3', 'dz5']].corr().iloc[0,1]:.3f}
- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è dz3-dz10: {data[['dz3', 'dz10']].corr().iloc[0,1]:.3f}
- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è dz5-dz10: {data[['dz5', 'dz10']].corr().iloc[0,1]:.3f}

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º:
{cluster_analysis.to_string() if not cluster_analysis.empty else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}
                    """
                    
                    st.download_button(
                        label="üìÑ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (TXT)",
                        data=report,
                        file_name=f'analysis_report_kmeans.txt',
                        mime='text/plain'
                    )
                
                with col3:
                    if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
                        st.rerun()
                        
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            st.exception(e)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω
    if uploaded_file is None:
        st.info("üí° –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        demo_type = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:",
            ["–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å", "–ì–∞—É—Å—Å–æ–≤—ã —Ö–æ–ª–º—ã", "–°–ª—É—á–∞–π–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å", "–°–µ–¥–ª–æ–≤–∞—è —Ç–æ—á–∫–∞"]
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            n_points = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫", 100, 1000, 300)
        
        with col2:
            noise_level = st.slider("–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞", 0.0, 0.5, 0.1)
        
        if st.button("üé≤ –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            np.random.seed(42)
            x = np.random.uniform(-10, 10, n_points)
            y = np.random.uniform(-10, 10, n_points)
            
            if demo_type == "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å":
                z = np.sin(np.sqrt(x**2 + y**2)) + np.random.normal(0, noise_level, n_points)
            elif demo_type == "–ì–∞—É—Å—Å–æ–≤—ã —Ö–æ–ª–º—ã":
                z = np.exp(-(x**2 + y**2)/20) + 0.5*np.exp(-((x-3)**2 + (y-3)**2)/10) + np.random.normal(0, noise_level, n_points)
            elif demo_type == "–°–ª—É—á–∞–π–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å":
                z = np.random.normal(0, 1, n_points) + 0.1*x*y + np.random.normal(0, noise_level, n_points)
            else:  # –°–µ–¥–ª–æ–≤–∞—è —Ç–æ—á–∫–∞
                z = x**2 - y**2 + np.random.normal(0, noise_level, n_points)
            
            demo_df = pd.DataFrame({'x': x, 'y': y, 'z': z})
            
            st.success("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!")
            st.write(f"–°–æ–∑–¥–∞–Ω–æ {len(demo_df)} —Ç–æ—á–µ–∫ —Ç–∏–ø–∞ '{demo_type}'")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
            col1, col2 = st.columns(2)
            with col1:
                st.write("**–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:**")
                st.dataframe(demo_df.head())
            with col2:
                st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                st.dataframe(demo_df.describe())

if __name__ == "__main__":
    main()